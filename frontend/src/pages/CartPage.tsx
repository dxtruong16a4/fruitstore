import React, { useState } from 'react';
import { Container, Typography, Box, Card, CardContent, Button, List, ListItem, ListItemText, Divider } from '@mui/material';
import { useAppSelector, useAppDispatch } from '../redux';
import { clearCart, removeFromCart, updateQuantity } from '../redux/slices/cartSlice';
import { syncCartWithBackend } from '../redux/thunks/cartThunks';
import type { CartItem } from '../redux/slices/cartSlice';
import ToastContainer from '../components/ToastContainer';
import { useToast } from '../hooks/useToast';
import CheckoutForm from '../components/CheckoutForm';
import { orderApi, type CreateOrderRequest } from '../api/orderApi';
import { PageLayout } from '../components/layout';

const CartPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const { items, totalItems, totalAmount } = useAppSelector((state) => state.cart);
  const { toasts, removeToast, showSuccess, showWarning, showError } = useToast();
  
  const [checkoutOpen, setCheckoutOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleRemoveItem = (itemId: number) => {
    const item = items.find(item => item.id === itemId);
    dispatch(removeFromCart(itemId));
    if (item) {
      showWarning('ƒê√£ x√≥a s·∫£n ph·∫©m', `${item.productName} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng c·ªßa b·∫°n`);
    }
  };

  const handleUpdateQuantity = (itemId: number, newQuantity: number) => {
    if (newQuantity <= 0) {
      handleRemoveItem(itemId);
    } else {
      dispatch(updateQuantity({ id: itemId, quantity: newQuantity }));
    }
  };

  const handleClearCart = () => {
    dispatch(clearCart());
    showSuccess('ƒê√£ x√≥a gi·ªè h√†ng', 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng c·ªßa b·∫°n');
  };

  const handleCheckout = () => {
    if (items.length === 0) {
      showWarning('Gi·ªè h√†ng tr·ªëng', 'Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n');
      return;
    }
    setCheckoutOpen(true);
  };

  const handleCheckoutConfirm = async (orderData: CreateOrderRequest) => {
    setIsProcessing(true);
    
    try {
      // First, sync the local cart with the backend
      if (items.length > 0) {
        await dispatch(syncCartWithBackend(items)).unwrap();
      }
      
      // Then create the order
      const response = await orderApi.createOrder(orderData);
      
      if (response.success && response.data) {
        // Clear the cart after successful order creation
        dispatch(clearCart());
        
        // Show success message
        showSuccess(
          'ƒê·∫∑t h√†ng th√†nh c√¥ng!', 
          `ƒê∆°n h√†ng #${response.data.orderNumber} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. T·ªïng c·ªông: $${response.data.totalAmount.toFixed(2)}`
        );
        
        // Close checkout dialog
        setCheckoutOpen(false);
      } else {
        showError('ƒê·∫∑t h√†ng th·∫•t b·∫°i', response.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Checkout error:', error);
      showError('ƒê·∫∑t h√†ng th·∫•t b·∫°i', 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCheckoutClose = () => {
    if (!isProcessing) {
      setCheckoutOpen(false);
    }
  };

  return (
    <PageLayout>
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        üõí Gi·ªè h√†ng
      </Typography>

      {items.length === 0 ? (
        <Card>
          <CardContent sx={{ textAlign: 'center', py: 4 }}>
            <Typography variant="h6" gutterBottom>
              Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Th√™m m·ªôt s·ªë s·∫£n ph·∫©m ƒë·ªÉ b·∫Øt ƒë·∫ßu
            </Typography>
          </CardContent>
        </Card>
      ) : (
        <Box>
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <List>
                {items.map((item: CartItem) => (
                  <React.Fragment key={item.id}>
                    <ListItem>
                      <ListItemText
                        primary={item.productName}
                        secondary={`$${item.productPrice} m·ªói c√°i`}
                      />
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Button
                          size="small"
                          onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                        >
                          -
                        </Button>
                        <Typography sx={{ minWidth: 40, textAlign: 'center' }}>
                          {item.quantity}
                        </Typography>
                        <Button
                          size="small"
                          onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                        >
                          +
                        </Button>
                        <Typography sx={{ minWidth: 80, textAlign: 'right' }}>
                          ${item.subtotal.toFixed(2)}
                        </Typography>
                        <Button
                          color="error"
                          size="small"
                          onClick={() => handleRemoveItem(item.id)}
                        >
                          X√≥a
                        </Button>
                      </Box>
                    </ListItem>
                    <Divider />
                  </React.Fragment>
                ))}
              </List>
            </CardContent>
          </Card>

          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  T·ªïng s·∫£n ph·∫©m: {totalItems}
                </Typography>
                <Typography variant="h5" color="primary">
                  T·ªïng c·ªông: ${totalAmount.toFixed(2)}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button
                  variant="outlined"
                  onClick={handleClearCart}
                >
                  X√≥a gi·ªè h√†ng
                </Button>
                <Button
                  variant="contained"
                  onClick={handleCheckout}
                  sx={{ flexGrow: 1 }}
                >
                  Ti·∫øn h√†nh thanh to√°n
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Box>
      )}

      {/* Toast Notifications */}
      <ToastContainer
        toasts={toasts}
        onRemoveToast={removeToast}
      />

      {/* Checkout Dialog */}
      <CheckoutForm
        open={checkoutOpen}
        onClose={handleCheckoutClose}
        onConfirm={handleCheckoutConfirm}
        loading={isProcessing}
      />
      </Container>
    </PageLayout>
  );
};

export default CartPage;
